{"version":3,"sources":["api/api.js","form/add-class-form.js","form/edit-student-form.js","form/add-image-form.js","form/class-settings.js","component/teacher-class.js","component/stories.js","App.js","serviceWorker.js","index.js"],"names":["API_CALL","get","endpoint","axios","post","data","put","patch","delete","Form","create","name","form","handle_submit","getFieldDecorator","layout","className","onSubmit","e","preventDefault","validateFields","err","values","Item","label","rules","required","message","placeholder","min","type","htmlType","EditStudent","React","memo","initialValue","username","password","surname","useState","file","setFile","resetFields","valuePropName","getValueFromEvent","console","log","Array","isArray","fileList","customRequest","onSuccess","setTimeout","beforeUpload","listType","classData","delete_class","class_id","a","window","API_ENDPOINT","CRUD_CLASS","status","gutter","formData","FormData","forEach","f","append","class","section","description","id","UPDATE_CLASS","response","title","onConfirm","TeacherClass","student_columns","dataIndex","key","render","text","record","index","theme","style","fontSize","cursor","marginRight","onClick","showStudentDetail","deleteStudent","stories_columns","JSON","parse","metadata","res","selectedClass","students","find","userId","ownerId","open","STORYLET_VIEWER","placement","parseInt","togglePublishStorylet","deleteStorylet","setSelectedClass","classes","setClasses","selectedStudent","setSelectedStudent","addClassModalVisible","setAddClassModalVisible","studentDetailModalVisible","setStudentDetailModalVisible","addImageModalVisible","setAddImageModalVisible","reload_data","fetch_data","selected_calss","Object","assign","idx","CRUD_STORYLET","CRUD_STUDENT","add_class_form_submit","size","student_number","add_image_form_submit","ADD_IMAGE","edit_user_submit","notification","error","useEffect","GET_CLASS","reload_story","cl","orientation","map","c","select_class","width","textAlign","background","imagePath","backgroundRepeat","backgroundSize","height","position","bottom","tabPosition","animated","TabPane","tab","dataSource","rowKey","columns","loading","marginBottom","stories","grid","column","images","renderItem","item","bodyStyle","src","path","objectFit","visible","onCancel","okButtonProps","display","cancelButtonProps","Stories","setData","setStudents","headers","API_NONCE","NONCE","st","push","backgroundColor","padding","Content","Layout","Footer","Sider","App","collapsed","setCollapsed","basename","SITE_URL","minHeight","collapsible","onCollapse","color","USER_INFO","icon","defaultSelectedKeys","mode","to","margin","exact","component","Boolean","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.00fa5af2.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nexport const API_CALL =\r\n{\r\n    get : (endpoint) => {\r\n        return axios.get(endpoint/*, { headers: { 'X-WP-Nonce': window.API_NONCE.NONCE } }*/);\r\n    },\r\n\r\n    post : (endpoint, data) => {\r\n        return axios.post(endpoint, data/*, { headers: { 'X-WP-Nonce': window.API_NONCE.NONCE } }*/);\r\n    },\r\n\r\n    put : (endpoint, data) => {\r\n        return axios.put(endpoint, data/*, { headers: { 'X-WP-Nonce': window.API_NONCE.NONCE } }*/);\r\n    },\r\n\r\n    patch : (endpoint, data) => {\r\n        return axios.patch(endpoint, data/*, { headers: { 'X-WP-Nonce': window.API_NONCE.NONCE } }*/);\r\n    },\r\n\r\n    delete : (endpoint) => {\r\n        return axios.delete(endpoint/*, { headers: { 'X-WP-Nonce': window.API_NONCE.NONCE } }*/);\r\n    }\r\n};","import Form from \"antd/es/form\";\r\nimport {Input, Button, InputNumber} from \"antd\";\r\nimport React from \"react\";\r\n\r\nfunction AddClass ({form, handle_submit}) {\r\n\r\n    const { getFieldDecorator } = form;\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        form.validateFields((err, values) => {\r\n            if(!err)\r\n                handle_submit(values);\r\n        });\r\n    };\r\n\r\n    return (\r\n        <Form\r\n            layout=\"vertical\"\r\n            className=\"zform ant-advanced-search-form\"\r\n            onSubmit={handleSubmit}>\r\n\r\n            <Form.Item label={'Classe'}>\r\n                {getFieldDecorator('class', {\r\n                    rules: [\r\n                        {\r\n                            required: true,\r\n                            message: 'Campo obbligatorio',\r\n                        },\r\n                    ],\r\n                })(<Input placeholder=\"placeholder\" />)}\r\n            </Form.Item>\r\n\r\n            <Form.Item label={'Sezione'}>\r\n                {getFieldDecorator('section', {\r\n                    rules: [\r\n                        {\r\n                            required: true,\r\n                            message: 'Campo obbligatorio',\r\n                        },\r\n                    ],\r\n                })(<Input placeholder=\"placeholder\" />)}\r\n            </Form.Item>\r\n\r\n            <Form.Item label={'Descrizione'}>\r\n                {getFieldDecorator('description', {\r\n                    rules: [\r\n                        {\r\n                            required: true,\r\n                            message: 'Campo obbligatorio',\r\n                        },\r\n                    ],\r\n                })(<Input placeholder=\"placeholder\" />)}\r\n            </Form.Item>\r\n\r\n            <Form.Item label={'Numero di studenti'}>\r\n                {getFieldDecorator('student_number', {\r\n                    rules: [\r\n                        {\r\n                            required: true,\r\n                            message: 'Campo obbligatorio',\r\n                        },\r\n                    ],\r\n                })(<InputNumber placeholder=\"1\" min={1} />)}\r\n            </Form.Item>\r\n\r\n            <Button type=\"primary\" htmlType=\"submit\">\r\n                Submit\r\n            </Button>\r\n        </Form>\r\n    );\r\n\r\n}\r\n\r\nexport default Form.create({name:'AddClass'})(AddClass);\r\n","import Form from \"antd/es/form\";\r\nimport {Input, Button} from \"antd\";\r\nimport React from \"react\";\r\n\r\nconst EditStudent = React.memo( ({form, handle_submit, data}) =>\r\n{\r\n    const { getFieldDecorator } = form;\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        form.validateFields((err, values) => {\r\n            if(!err)\r\n                handle_submit(values);\r\n        });\r\n    };\r\n\r\n    return (\r\n        <Form\r\n            layout=\"vertical\"\r\n            className=\"zform ant-advanced-search-form\"\r\n            onSubmit={handleSubmit}>\r\n\r\n            <Form.Item label={'Username'}>\r\n                {getFieldDecorator('username', {\r\n                    initialValue : data.username,\r\n                    rules: [\r\n                        {\r\n                            required: true,\r\n                            message: 'Campo obbligatorio',\r\n                        },\r\n                    ],\r\n                })(<Input placeholder=\"placeholder\" />)}\r\n            </Form.Item>\r\n\r\n            <Form.Item label={'Password'}>\r\n                {getFieldDecorator('password', {\r\n                    initialValue : data.password,\r\n                    rules: [\r\n                        {\r\n                            required: true,\r\n                            message: 'Campo obbligatorio',\r\n                        },\r\n                    ],\r\n                })(<Input placeholder=\"placeholder\" />)}\r\n            </Form.Item>\r\n\r\n            <Form.Item label={'Nome'}>\r\n                {getFieldDecorator('name', {\r\n                    initialValue : data.name\r\n                })(<Input placeholder=\"placeholder\" />)}\r\n            </Form.Item>\r\n\r\n            <Form.Item label={'Cognome'}>\r\n                {getFieldDecorator('surname', {\r\n                    initialValue : data.surname\r\n                })(<Input placeholder=\"placeholder\" />)}\r\n            </Form.Item>\r\n\r\n            <Button type=\"primary\" htmlType=\"submit\">\r\n                Submit\r\n            </Button>\r\n        </Form>\r\n    );\r\n});\r\n\r\nexport default Form.create({name:'EditStudent'})(EditStudent);\r\n","import React, {useState} from \"react\";\r\nimport Form from \"antd/es/form\";\r\nimport {Input, Button, Upload, Icon} from \"antd\";\r\n\r\nfunction AddImage ({form, handle_submit}) {\r\n\r\n    const [file, setFile] = useState(null);\r\n    const { getFieldDecorator } = form;\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        form.validateFields((err, values) => {\r\n            if(!err) {\r\n                form.resetFields();\r\n                handle_submit({...values, file});\r\n            }\r\n        });\r\n    };\r\n\r\n    const normFile = e => {\r\n        console.log('Upload event:', e);\r\n        if (Array.isArray(e)) {\r\n            return e;\r\n        }\r\n        return e && e.fileList;\r\n    };\r\n\r\n    const dummy_request = function({file, onSuccess})\r\n    {\r\n        setTimeout(()=>{\r\n            onSuccess(\"ok\")\r\n        },0);\r\n    };\r\n\r\n    const handle_upload = function (file, fileList) {\r\n        setFile(fileList)\r\n    };\r\n\r\n    return (\r\n        <Form\r\n            layout=\"vertical\"\r\n            className=\"zform ant-advanced-search-form\"\r\n            onSubmit={handleSubmit}>\r\n\r\n            <Form.Item label={'Nome'}>\r\n                {getFieldDecorator('name', {\r\n                    rules: [\r\n                        {\r\n                            required: true,\r\n                            message: 'Campo obbligatorio',\r\n                        },\r\n                    ],\r\n                })(<Input placeholder=\"placeholder\" />)}\r\n            </Form.Item>\r\n\r\n            <Form.Item label={'Description'}>\r\n                {getFieldDecorator('description', {\r\n                    rules: [\r\n                        {\r\n                            required: true,\r\n                            message: 'Campo obbligatorio',\r\n                        },\r\n                    ],\r\n                })(<Input placeholder=\"placeholder\" />)}\r\n            </Form.Item>\r\n\r\n            <Form.Item label={'Immagine'} >\r\n                {getFieldDecorator('image', {\r\n                    initialValue: [],\r\n                    valuePropName: 'fileList',\r\n                    getValueFromEvent: normFile,\r\n                    rules: [\r\n                        {\r\n                            required: true,\r\n                            message: 'Campo obbligatorio',\r\n                        },\r\n                    ],\r\n                })(<Upload customRequest={dummy_request} beforeUpload={handle_upload} listType=\"picture\" name='image'>\r\n                        <Button>\r\n                            <Icon type=\"upload\" /> Click to upload\r\n                        </Button>\r\n                    </Upload>)}\r\n            </Form.Item>\r\n\r\n            <Button type=\"primary\" htmlType=\"submit\">\r\n                Submit\r\n            </Button>\r\n        </Form>\r\n    );\r\n\r\n}\r\n\r\nexport default Form.create({name:'AddImage'})(AddImage);\r\n","import React, {useState} from \"react\";\r\nimport {Button, Icon, Input, Popconfirm, Upload, Row, Col} from \"antd\";\r\nimport {API_CALL} from \"../api/api\";\r\nimport Form from \"antd/es/form\";\r\n\r\nfunction ClassSettings({classData, form})\r\n{\r\n    const [file, setFile] = useState(null);\r\n    const { getFieldDecorator } = form;\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        form.validateFields( async (err, values) =>\r\n        {\r\n            if(!err)\r\n            {\r\n                console.log(values);\r\n\r\n                const formData = new FormData();\r\n                file && file.forEach((f) => {\r\n                    formData.append('files[]', f);\r\n                });\r\n                formData.append('class', values.class);\r\n                formData.append('section', values.section);\r\n                formData.append('description', values.description);\r\n                formData.append('classId', classData.id);\r\n\r\n                let response = await API_CALL.post(window.API_ENDPOINT.UPDATE_CLASS, formData);\r\n                console.log(response);\r\n            }\r\n        });\r\n    };\r\n\r\n    const delete_class = async (class_id) =>\r\n    {\r\n        console.log(class_id);\r\n        let response = await API_CALL.delete(`${window.API_ENDPOINT.CRUD_CLASS}/${class_id}`);\r\n\r\n        if(response.data.status === 'OK')\r\n        {\r\n            console.log('deleted');\r\n        }\r\n    };\r\n\r\n    const normFile = e => {\r\n        console.log('Upload event:', e);\r\n        if (Array.isArray(e)) {\r\n            return e;\r\n        }\r\n        return e && e.fileList;\r\n    };\r\n\r\n    const dummy_request = function({file, onSuccess})\r\n    {\r\n        setTimeout(()=>{\r\n            onSuccess(\"ok\")\r\n        },0);\r\n    };\r\n\r\n    const handle_upload = function (file, fileList) {\r\n        setFile(fileList)\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Row gutter={[16, 16]}>\r\n                <Col>\r\n                    <Form\r\n                        layout=\"vertical\"\r\n                        className=\"zform ant-advanced-search-form\"\r\n                        onSubmit={handleSubmit}>\r\n\r\n                        <Form.Item label={'Classe'}>\r\n                            {getFieldDecorator('class', {\r\n                                initialValue : classData.class,\r\n                                rules: [\r\n                                    {\r\n                                        required: true,\r\n                                        message: 'Campo obbligatorio',\r\n                                    },\r\n                                ],\r\n                            })(<Input placeholder=\"placeholder\" />)}\r\n                        </Form.Item>\r\n\r\n                        <Form.Item label={'Sezione'}>\r\n                            {getFieldDecorator('section', {\r\n                                initialValue : classData.section,\r\n                                rules: [\r\n                                    {\r\n                                        required: true,\r\n                                        message: 'Campo obbligatorio',\r\n                                    },\r\n                                ],\r\n                            })(<Input placeholder=\"placeholder\" />)}\r\n                        </Form.Item>\r\n\r\n                        <Form.Item label={'Descrizione'}>\r\n                            {getFieldDecorator('description', {\r\n                                initialValue : classData.description,\r\n                                rules: [\r\n                                    {\r\n                                        required: true,\r\n                                        message: 'Campo obbligatorio',\r\n                                    },\r\n                                ],\r\n                            })(<Input placeholder=\"placeholder\" />)}\r\n                        </Form.Item>\r\n\r\n                        <Form.Item label={'Immagine'} >\r\n                            {getFieldDecorator('image', {\r\n                                initialValue: [],\r\n                                valuePropName: 'fileList',\r\n                                getValueFromEvent: normFile\r\n                            })(<Upload customRequest={dummy_request} beforeUpload={handle_upload} listType=\"picture\" name='image'>\r\n                                <Button>\r\n                                    <Icon type=\"upload\" /> Click to upload\r\n                                </Button>\r\n                            </Upload>)}\r\n                        </Form.Item>\r\n\r\n                        <Button type=\"primary\" htmlType=\"submit\">\r\n                            <Icon type=\"edit\" /> Modifica\r\n                        </Button>\r\n                    </Form>\r\n                </Col>\r\n            </Row>\r\n            <Row gutter={[16, 16]}>\r\n                <Col>\r\n                    <Popconfirm title=\"Vuoi cancellare la classe ?\" onConfirm={(e) => delete_class(classData.id)}>\r\n                        <Button type=\"danger\">\r\n                            <Icon type='delete' /> Elimina la classe\r\n                        </Button>\r\n                    </Popconfirm>\r\n                </Col>\r\n            </Row>\r\n\r\n        </>\r\n\r\n    )\r\n\r\n}\r\n\r\nexport default Form.create({name:'ClassSettings'})(ClassSettings);","import React, {useState, useEffect} from 'react';\r\nimport { Icon, Tabs, Table, Modal, Popconfirm, notification, Button, Tooltip, Divider, Empty, List, Card, Row, Col } from 'antd';\r\nimport {API_CALL} from '../api/api';\r\n\r\nimport AddClassForm from '../form/add-class-form';\r\nimport EditStudentForm from '../form/edit-student-form';\r\nimport AddImageForm from '../form/add-image-form'\r\nimport ClassSettings from \"../form/class-settings\";\r\n\r\nimport '../css/teacher-class.css'\r\n\r\nexport default function TeacherClass()\r\n{\r\n    const student_columns = [\r\n        {title: 'Username', dataIndex: 'username', key: 'username'},\r\n        {title: 'Password', dataIndex: 'password', key: 'password'},\r\n        {title: 'Nome',     dataIndex: 'name',     key: 'name'},\r\n        {title: 'Cognome',  dataIndex: 'surname',  key: 'surname'},\r\n        {title: 'Azioni',   key: 'action',\r\n            render: (text, record, index) =>\r\n            {\r\n                return (\r\n                    <div>\r\n                        <Icon theme=\"filled\"\r\n                              style={{fontSize:'24px', cursor:'pointer', marginRight:'24px'}}\r\n                              type=\"edit\"\r\n                              onClick={() => showStudentDetail(record)}\r\n                        />\r\n                        <Popconfirm title=\"Sure to ?\" onConfirm={() => deleteStudent(record)}>\r\n                            <Icon theme=\"filled\"\r\n                                  style={{fontSize:'24px', cursor:'pointer'}}\r\n                                  type=\"delete\"\r\n                            />\r\n                        </Popconfirm>\r\n                    </div>\r\n                )\r\n            }\r\n        }\r\n    ];\r\n\r\n    const stories_columns = [\r\n        {title: 'Titolo', key: 'name',\r\n            render: (text, record, index) => {\r\n                let metadata = JSON.parse(record.metadata);\r\n                return metadata.name\r\n            }\r\n        },\r\n        {title: 'Descrizione', key: 'description',\r\n            render: (text, record, index) => {\r\n                let metadata = JSON.parse(record.metadata);\r\n                return metadata.description\r\n            }},\r\n        {title: 'Username', key: 'ownerId',\r\n            render: (text, record, index) =>\r\n            {\r\n                let res = selectedClass.students.find(\r\n                    (e) => (e.userId === record.ownerId)\r\n                );\r\n                return `${res.name} ${res.surname} (${res.username})`;\r\n            }\r\n        },\r\n        {title: 'Azioni',   key: 'action',\r\n            render: (text, record, index) =>\r\n            {\r\n                return (\r\n                    <>\r\n                        <Icon theme=\"filled\"\r\n                              style={{fontSize:'24px', cursor:'pointer', marginRight:'24px'}}\r\n                              type=\"play-circle\"\r\n                              onClick={() => window.open(`${window.API_ENDPOINT.STORYLET_VIEWER}/${record.id}`,'_blank')}\r\n                        />\r\n                        <Tooltip placement=\"top\" title={record.status === null || parseInt(record.status) === 0 ? 'Rendi pubblica' : 'Rendi privata'}>\r\n                        <Icon theme=\"filled\"\r\n                              style={{fontSize:'24px', cursor:'pointer', marginRight:'24px'}}\r\n                              type={record.status === null || parseInt(record.status) === 0 ? 'eye' : 'eye-invisible'}\r\n                              onClick={() => togglePublishStorylet(record)}\r\n                        />\r\n                        </Tooltip>\r\n                        <Popconfirm title=\"Sure to ?\" onConfirm={() => deleteStorylet(record)}>\r\n                            <Icon theme=\"filled\"\r\n                                  style={{fontSize:'24px', cursor:'pointer'}}\r\n                                  type=\"delete\"\r\n                            />\r\n                        </Popconfirm>\r\n                    </>\r\n                )\r\n            }\r\n        }\r\n    ];\r\n\r\n    const [selectedClass, setSelectedClass] = useState(null);\r\n    const [classes, setClasses] = useState(null);\r\n\r\n    const [selectedStudent, setSelectedStudent] = useState(null);\r\n\r\n    const [addClassModalVisible, setAddClassModalVisible] = useState(false);\r\n    const [studentDetailModalVisible, setStudentDetailModalVisible] = useState(false);\r\n    const [addImageModalVisible, setAddImageModalVisible] = useState(false);\r\n\r\n    const reload_data = async () =>\r\n    {\r\n        let data = await fetch_data();\r\n        let selected_calss = Object.assign({}, data[selectedClass.idx]);\r\n        selected_calss.idx = selectedClass.idx;\r\n        setSelectedClass(selected_calss);\r\n    };\r\n\r\n    const togglePublishStorylet = async (data) =>\r\n    {\r\n        console.log(data);\r\n        let response = await API_CALL.put(`${window.API_ENDPOINT.CRUD_STORYLET}/${data.id}`, {status : (parseInt(data.status) === 1 ? 0 : 1)})\r\n\r\n        if(response.data.status === 'OK')\r\n        {\r\n            reload_data();\r\n        }\r\n    };\r\n\r\n    const deleteStorylet = async (data) =>\r\n    {\r\n        console.log(data);\r\n        let response = await API_CALL.delete(`${window.API_ENDPOINT.CRUD_STORYLET}/${data.id}`);\r\n\r\n        if(response.data.status === 'OK')\r\n        {\r\n            fetch_data();\r\n        }\r\n    };\r\n\r\n    const select_class = (idx) =>\r\n    {\r\n        classes[idx].idx = idx;\r\n        setSelectedClass(Object.assign({}, classes[idx]));\r\n    };\r\n\r\n    const showStudentDetail = (data) =>\r\n    {\r\n        console.log('show student detail');\r\n        console.log(data);\r\n        setSelectedStudent(Object.assign({}, data));\r\n        setStudentDetailModalVisible(true);\r\n    };\r\n\r\n    const deleteStudent = async (data) =>\r\n    {\r\n        console.log(data);\r\n        let response = await API_CALL.delete(`${window.API_ENDPOINT.CRUD_STUDENT}/${data.id}`);\r\n\r\n        if(response.data.status === 'OK')\r\n        {\r\n            reload_data();\r\n        }\r\n    };\r\n\r\n    const add_class_form_submit = async (data) =>\r\n    {\r\n        console.log(data);\r\n        let response = await API_CALL.post(window.API_ENDPOINT.CRUD_CLASS,\r\n            {\r\n                    class       : data.class,\r\n                    section     : data.section,\r\n                    description : data.description,\r\n                    size        : data.student_number\r\n                }\r\n            );\r\n\r\n        if(response.data.status === 'OK')\r\n        {\r\n            setAddClassModalVisible(false);\r\n            fetch_data();\r\n        }\r\n    };\r\n\r\n    const add_image_form_submit = async (data) =>\r\n    {\r\n        const formData = new FormData();\r\n        data.file.forEach((file) => {\r\n            formData.append('files[]', file);\r\n        });\r\n        formData.append('name', data.name);\r\n        formData.append('description', data.description);\r\n        formData.append('classId', selectedClass.id);\r\n\r\n        let response = await API_CALL.post(window.API_ENDPOINT.ADD_IMAGE, formData);\r\n\r\n        if(response.data.status === 'OK')\r\n        {\r\n            setAddImageModalVisible(false);\r\n            reload_data();\r\n        }\r\n\r\n    };\r\n\r\n    const edit_user_submit = async (data) =>\r\n    {\r\n        console.log(data);\r\n        let response = await API_CALL.put(`${window.API_ENDPOINT.CRUD_STUDENT}/${selectedStudent.id}`,\r\n            {\r\n                    username : data.username,\r\n                    password : data.password,\r\n                    name     : data.name,\r\n                    surname  : data.surname,\r\n                }\r\n            );\r\n\r\n        if(response.data.status === 'OK')\r\n        {\r\n            reload_data();\r\n        } else {\r\n            notification.open({\r\n                message: 'Errore',\r\n                description: response.data.error\r\n            });\r\n        }\r\n\r\n        setStudentDetailModalVisible(false);\r\n        setSelectedStudent(null);\r\n    };\r\n\r\n    useEffect(() =>\r\n    {\r\n        fetch_data();\r\n    }, []);\r\n\r\n    const fetch_data = async () =>\r\n    {\r\n        let response = await API_CALL.get(window.API_ENDPOINT.GET_CLASS);\r\n\r\n        setClasses(response.data.data);\r\n        return response.data.data;\r\n    };\r\n\r\n    const reload_story = async () => {\r\n        let cl = await fetch_data();\r\n        cl[selectedClass.idx].idx = selectedClass.idx;\r\n        setSelectedClass(Object.assign({}, cl[selectedClass.idx]));\r\n    };\r\n\r\n    /*const ideas = [\r\n        {key: '1', title: 'Una slide iniziale', description: 'Obiettivo 7'},\r\n        {key: '2', title: 'Una slide iniziale e una finale', description: 'Obiettivo 4'},\r\n        {key: '3', title: 'Una slide al centro', description: 'Obiettivo 4'},\r\n        {key: '4', title: 'Tema libero', description: 'Obiettivo 1'},\r\n    ];\r\n\r\n    const ideas_columns = [\r\n        {title: 'Titolo', dataIndex: 'title', key: 'title'},\r\n        {title: 'Descrizione', dataIndex: 'description', key: 'description'},\r\n    ];*/\r\n\r\n    return (\r\n        <>\r\n            <Divider orientation={\"left\"}>Le tue classi</Divider>\r\n\r\n            <div className='class-container'>\r\n                {classes && classes.map((c, idx) => {\r\n                    return (\r\n                        <div onClick={(e) => select_class(idx)} key={`class_${idx}`} className='class'>\r\n                            <div style={{width:'100%', textAlign:'center', background: `url(${c.imagePath})`, backgroundRepeat: 'no-repeat', backgroundSize: 'cover', height:'100%'}}>\r\n                                {!c.imagePath &&\r\n                                    (<div>\r\n                                        <Icon theme=\"filled\"\r\n                                              style={{fontSize: '64px', cursor: 'pointer'}}\r\n                                              type=\"bank\"\r\n                                        />\r\n                                    </div>)\r\n                                }\r\n\r\n                                <div style={{position:'absolute', bottom:'10px', width:'calc(100% - 16px)'}}>\r\n                                    <div>{c.class} {c.section}</div>\r\n                                    <div>{c.description}</div>\r\n                                </div>\r\n\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                })}\r\n                <div className='add-class-container'>\r\n                    <Button onClick={() => setAddClassModalVisible(true)} type=\"primary\" className='add-button'>\r\n                        <Icon type='plus' /> Aggiungi classe\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n\r\n            <Divider>Info {selectedClass ? `${selectedClass.class} - ${selectedClass.section}` : ''}</Divider>\r\n\r\n            {selectedClass ? (\r\n                <div className='class-detail'>\r\n                    <Tabs tabPosition='top' animated={false}>\r\n\r\n                        <Tabs.TabPane tab={<span><Icon type=\"team\" />Studenti</span>} key=\"1\">\r\n                            <Table dataSource={selectedClass.students}\r\n                                   rowKey='id'\r\n                                   columns={student_columns}\r\n                            />\r\n                        </Tabs.TabPane>\r\n\r\n                        <Tabs.TabPane tab={<span><Icon type=\"highlight\" />Storie</span>} key=\"2\">\r\n\r\n                            <Button type=\"primary\" onClick={reload_story} loading={false} style={{marginBottom:'16px'}}>\r\n                                <Icon type='reload' /> Aggiorna\r\n                            </Button>\r\n\r\n                            <Table dataSource={selectedClass.stories}\r\n                                   rowKey='id'\r\n                                   columns={stories_columns}\r\n                            />\r\n                        </Tabs.TabPane>\r\n\r\n                        <Tabs.TabPane tab={<span><Icon type=\"file-image\" />Immagini</span>} key=\"3\">\r\n                            <Button onClick={()=>setAddImageModalVisible(true)} type=\"primary\" style={{marginBottom: 16}}>\r\n                                <Icon type='plus' /> Aggiungi immagine\r\n                            </Button>\r\n                            <List\r\n                                grid={{ gutter: 8, column: 5 }}\r\n                                dataSource={selectedClass.images}\r\n                                renderItem={item => (\r\n                                    <List.Item>\r\n                                        <Card title={item.name} bodyStyle={{height:'200px'}}>\r\n                                            <img src={item.path} style={{height:'calc(100% - 20px)', width:'100%', objectFit:'contain'}} />\r\n                                            {item.description}\r\n                                        </Card>\r\n                                    </List.Item>\r\n                                )}\r\n                            />\r\n                        </Tabs.TabPane>\r\n\r\n                        <Tabs.TabPane tab={<span><Icon type=\"setting\" />Preferenze</span>} key=\"4\">\r\n                            <ClassSettings classData={selectedClass} />\r\n                        </Tabs.TabPane>\r\n\r\n                        {/*\r\n                            <Tabs.TabPane tab={<span><Icon type=\"bulb\"/>Idee</span>} key=\"3\">\r\n                                <Table style={{backgroundColor: '#ffffff', padding: '16px'}}\r\n                                       dataSource={ideas}\r\n                                       columns={ideas_columns}\r\n                                />\r\n                            </Tabs.TabPane>\r\n                        */}\r\n\r\n\r\n                    </Tabs>\r\n                </div> ) : <Empty description={false} >Seleziona una classe per accedere alle relative informazioni</Empty> }\r\n\r\n            <Modal\r\n                title=\"Aggiungi classe\"\r\n                visible={addClassModalVisible}\r\n                onCancel={() => setAddClassModalVisible(false)}\r\n                okButtonProps={{ style: { display: 'none' } }}\r\n                cancelButtonProps={{ style: { display: 'none' } }}\r\n            >\r\n                <AddClassForm handle_submit={add_class_form_submit} />\r\n            </Modal>\r\n\r\n            <Modal\r\n                title=\"Info Studente\"\r\n                visible={studentDetailModalVisible}\r\n                onCancel={() => setStudentDetailModalVisible(false)}\r\n                okButtonProps={{ style: { display: 'none' } }}\r\n                cancelButtonProps={{ style: { display: 'none' } }}\r\n            >\r\n                {selectedStudent ? (<EditStudentForm handle_submit={edit_user_submit} data={selectedStudent} />) : null}\r\n            </Modal>\r\n\r\n            <Modal\r\n                title=\"Aggiungi immagine\"\r\n                visible={addImageModalVisible}\r\n                onCancel={() => setAddImageModalVisible(false)}\r\n                okButtonProps={{ style: { display: 'none' } }}\r\n                cancelButtonProps={{ style: { display: 'none' } }}\r\n            >\r\n                <AddImageForm handle_submit={add_image_form_submit} />\r\n            </Modal>\r\n        </>\r\n    )\r\n}","import React, {useEffect, useState} from 'react';\r\nimport {Divider, Table} from 'antd';\r\nimport axios from \"axios\";\r\n\r\nexport default function Stories()\r\n{\r\n    const [data, setData] = useState(null);\r\n    const [students, setStudents] = useState(null);\r\n\r\n    useEffect(() =>\r\n    {\r\n        fetch_data();\r\n    }, []);\r\n\r\n    const fetch_data = async () => {\r\n        let response = await axios.get(window.API_ENDPOINT.GET_CLASS,\r\n            { headers: { 'X-WP-Nonce': window.API_NONCE.NONCE } });\r\n        let data = [];\r\n        let students = [];\r\n\r\n        response.data.data.forEach((cl) => {\r\n            students = [...students, ...cl.students];\r\n            cl.stories.forEach((st) => {\r\n                if(parseInt(st.status) === 1)\r\n                    data.push(st)\r\n            })\r\n        });\r\n\r\n        setStudents(students);\r\n        setData(data);\r\n    };\r\n\r\n    const stories_columns = [\r\n        {title: 'Titolo', key: 'name',\r\n            render: (text, record, index) => {\r\n                let metadata = JSON.parse(record.metadata);\r\n                return metadata.name\r\n            }\r\n        },\r\n        {title: 'Descrizione', key: 'description',\r\n            render: (text, record, index) => {\r\n                let metadata = JSON.parse(record.metadata);\r\n                return metadata.description\r\n            }\r\n        },\r\n        {title: 'Username', key: 'ownerId',\r\n            render: (text, record, index) =>\r\n            {\r\n                let res = students.find(\r\n                    (e) => (e.userId === record.ownerId)\r\n                );\r\n                return `${res.name} ${res.surname} (${res.username})`;\r\n            }\r\n        }\r\n    ];\r\n\r\n    return(\r\n        <>\r\n            <Divider orientation={\"left\"}>Storie pubblicate</Divider>\r\n            <Table style={{backgroundColor:'#ffffff', padding: '16px'}}\r\n                   dataSource={data}\r\n                   columns={stories_columns}\r\n                   rowKey='id'\r\n            />\r\n        </>\r\n    )\r\n}","import React, {useState} from 'react';\r\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\r\nimport 'antd/dist/antd.css';\r\nimport './index.css';\r\nimport { Layout, Menu, Icon, Avatar } from 'antd';\r\nimport TeacherClass from './component/teacher-class';\r\nimport Stories from './component/stories';\r\n\r\nconst { Content, Footer, Sider } = Layout;\r\n\r\nfunction App()\r\n{\r\n    const [collapsed, setCollapsed] = useState(false);\r\n\r\n    const onCollapse = collapsed => {\r\n        setCollapsed( collapsed );\r\n    };\r\n\r\n  return (\r\n      <>\r\n          <Router basename={`${window.API_ENDPOINT.SITE_URL}admin-area/`}>\r\n              <Layout style={{ minHeight: '100vh' }}>\r\n\r\n                  <Sider collapsible collapsed={collapsed} onCollapse={onCollapse}>\r\n\r\n                      <div style={{ width:'100%', textAlign: 'center', 'padding': '16px' }}>\r\n                          <div style={{color:'#ffffff', marginBottom: '8px'}}>Ciao {`${window.USER_INFO.name} ${window.USER_INFO.surname}`}</div>\r\n                          <Avatar size={64} icon=\"user\" />\r\n                      </div>\r\n\r\n                      <Menu theme=\"dark\" defaultSelectedKeys={['1']} mode=\"inline\">\r\n                          <Menu.Item key=\"1\">\r\n                              <Icon type=\"team\" />\r\n                              <span>Classi</span>\r\n                              <Link to=\"/\" />\r\n                          </Menu.Item>\r\n                          <Menu.Item key=\"2\">\r\n                              <Icon type=\"highlight\" />\r\n                              <span>Storie pubblicate</span>\r\n                              <Link to=\"/stories\" />\r\n                          </Menu.Item>\r\n                      </Menu>\r\n                  </Sider>\r\n\r\n                  <Layout>\r\n                      <Content className=\"site-layout-background\" style={{margin: '24px 16px', padding: 24}}>\r\n\r\n                          <Route exact path=\"/\" component={TeacherClass} />\r\n                          <Route       path=\"/stories\" component={Stories} />\r\n\r\n                      </Content>\r\n                      <Footer style={{ textAlign: 'center' }}>Storylet Admin by ISISLab</Footer>\r\n                  </Layout>\r\n\r\n              </Layout>\r\n          </Router>\r\n      </>\r\n  )\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}